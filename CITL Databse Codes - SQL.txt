TABLE CREATION /* Before altering tables to add primary keys + foreign keys, please add all the values first. If you declare primary keys and foreign keys first without any values you would get an error message saying parent keys not found */CREATE TABLE BUDGET (Cost_Center_Account_Number INT,Expenses INT,Difference VARCHAR2 (10),Budget_AMT INT,CITL_ID INT,Description VARCHAR2 (60)); ALTER TABLE BUDGETADD PRIMARY KEY (Cost_Center_Account_Number); ALTER TABLE BUDGET ADD FOREIGN KEY (CITL_ID) REFERENCES CITL_EMP;  CREATE TABLE EVENTS (Event_ID INT NOT NULL,Event_Type VARCHAR2 (30) NOT NULL,Catering_Services VARCHAR2 (30),Cost_Center_Account_Number INT, Event_Recordings VARCHAR2 (40),Description VARCHAR2 (60));ALTER TABLE EVENTSADD PRIMARY KEY (Event_ID); ALTER TABLE EVENTSADD FOREIGN KEY (Cost_Center_Accounts_Number) REFERENCES BUDGET; CREATE TABLE SPEAKER (Email_Address VARCHAR2 (30) NOT NULL,EVENT_ID INT NOT NULL,Speaker_FName VARCHAR (20) NOT NULL,Speaker_LName VARCHAR2 (20) NOT NULL,Phone_Number INT NOT NULL);ALTER TABLE SPEAKER ADD PRIMARY KEY (Email_Address); ALTER TABLE SPEAKER ADD FOREIGN KEY (Event_ID) REFERENCES Events   CREATE TABLE VENUE (Venue_ID INT NOT NULL,Schedule_number INT,Location VARCHAR2 (30) NOT NULL,Venue_Size INT NOT NULL,Expected_Guests INT,Booking_Information VARCHAR2 (40),CITL_ID INT); ALTER TABLE VENUE ADD PRIMARY KEY (Venue_ID); ALTER TABLE VENUE ADD FOREIGN KEY (CITL_ID) REFERENCES CITL_EMP; ALTER TABLE VENUE DROP COLUMN VENUE_SIZE;/* Fulfilling requirement of dropping one column */  CREATE TABLE CITL_EMP (CITL_ID INT NOT NULL,CITL_STAFF VARCHAR2 (30),Faculty_Fellows VARCHAR2 (30), Student_Workers VARCHAR2 (30),Responsibility_History VARCHAR2 (30));/* Faculty_Fellows fulfilling multivalued attribute, can be both CITL and employee */ ALTER TABLE CITL_EMPADD PRIMARY KEY (CITL_ID);  CREATE TABLE SURVEY (Attendee_ID INT NOT NULL,Feedback_ID INT NOT NULL,Event_ID INT,Question_ID INT NOT NULL,Answered_Questions VARCHAR2 (40),CITL_ID INT); ALTER TABLE SURVEYADD PRIMARY KEY (Attendee_ID, Feedback_ID, Event_ID); ALTER TABLE SURVEY ADD FOREIGN KEY (Attendee_ID) REFERENCES ATTENDEES; ALTER TABLE SURVEY ADD FOREIGN KEY (Feedback_ID) REFERENCES FEEDBACK; ALTER TABLE SURVEY ADD FOREIGN KEY (Event_ID) REFERENCES EVENTS; ALTER TABLE SURVEY ADD FOREIGN KEY (CITL_ID) REFERENCES CITL_EMP;  CREATE TABLE ATTENDEES (Attendee_ID INT NOT NULL,Attendee_Fname VARCHAR2 (30),Attendee_Lname VARCHAR2 (30),Registration_Cancel VARCHAR2 (5),Email_Address VARCHAR 2 (40),Phone_Number INT); ALTER TABLE ATTENDEESADD PRIMARY KEY (Attendee_ID); CREATE TABLE REGISTRATION (Attendee_ID INT NOT NULL,Will_Attend VARCHAR2 (5),Will_Not_Attend VARCHAR2 (5),Unsure VARCHAR2 (5)); ALTER TABLE REGISTRATION ADD PRIMARY KEY (Attendee_ID); ALTER TABLE REGISTRATIONADD FOREIGN KEY (Attendee_ID) REFERENCES ATTENDEES;    CREATE TABLE SCHEDULE (Schedule_Number INT NOT NULL,Schedule_Date DATE,Schedule_Time VARCHAR2 (20) NOT NULL); ALTER TABLE SCHEDULE ADD PRIMARY KEY (Schedule_Number);  CREATE TABLE DEPARTMENT (DEPT_CODE INT NOT NULL,CITL_ID INT,AUS_Building VARCHAR2 (40) NOT NULL,DEPT_Name VARCHAR 2 (40) NOT NULL,DEPT_Division VARCHAR2 (30) NOT NULL); ALTER TABLE DEPARTMENT ADD PRIMARY KEY (DEPT_CODE); ALTER TABLE DEPARTMENT ADD FOREIGN KEY (CITL_ID) REFERENCES CITL_EMP; ALTER TABLE DIVISIONDROP COLUMN DEPT_Division;  CREATE TABLE FEEDBACK (Feedback_ID INT NOT NULL,Positive_Feedback VARCHAR2 (50),Negative_Feedback VARCHAR2 (50),Comments VARCHAR2 (50)); ALTER TABLE FEEDBACK ADD PRIMARY KEY (Feedback_ID); ALTER TABLE FEEDBACKADD Question_History_ID INT; /* Fulfilling the add one column requirement */ CREATE TABLE EMPLOYEE (EMP_ID INT NOT NULL,DEPT_CODE INT,EMP_Fname VARCHAR2 (30) NOT NULL,EMP_Lname VARCHAR2 (30) NOT NULL,Email_Address VARCHAR2 (40) NOT NULL,Description VARCHAR2 (30));ALTER TABLE EMPLOYEEADD PRIMARY KEY (Employee_ID); ALTER TABLE EMPLOYEEADD FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT; CREATE TABLE SPECIAL_EVENT (Special_ID INT NOT NULL,DEPT_CODE INT NOT NULL,Requested_Event VARCHAR2 (50),Additional_Requests VARCHAR2 (50)); ALTER TABLE SPECIAL_EVENTADD PRIMARY KEY (Special_ID); ALTER TABLE SPECIAL_EVENT ADD FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT; CREATE TABLE INT_SPEAKER (Email_Address VARCHAR2 (40) NOT NULL,EMP_ID INT NOT NULL,Speaker_FName VARCHAR (20) NOT NULL,Speaker_LName VARCHAR2 (20) NOT NULL,Dept_Code INT NOT NULL); ALTER TABLE INT_SPEAKERADD PRIMARY KEY (Email_Address); /* Fulfills the requirement of adding one table to a previously existing table *//* This is a subtype entity to SPEAKERS */ CREATE TABLE EXT_SPEAKER (Email_Address VARCHAR2 (40) NOT NULL,Speaker_FName VARCHAR (20) NOT NULL,Speaker_LName VARCHAR2 (20) NOT NULL,Event_ID INT,Employer VARCHAR2 (40) NOT NULL); ALTER TABLE EXT_SPEAKERADD PRIMARY KEY (Email_Address); /* This is another subtype to the supertype SPEAKER */ INSERTING VALUES INTO TABLESINSERT INTO BUDGET VALUES (20001, 8000,'+2000', 10000, 100011, 'Seminar Event');INSERT INTO BUDGET VALUES (21000, 10000,'0', 10000, 100011,'Training Event');INSERT INTO BUDGET VALUES (22001 ,15000,'-1000',14000, 100012,'Workshop Event');INSERT INTO BUDGET VALUES (23000, 6000, '+4000', 10000, 100013,'Seminar Event');INSERT INTO BUDGET VALUES (24001, 9000, '-500', 8500, 100012,'Training Event');INSERT INTO BUDGET VALUES (25000, 13000, '-3000',10000, 100012,'Workshop Event');INSERT INTO BUDGET VALUES (30001, 8000, '+2000',10000, 100011, 'Seminar Event');INSERT INTO BUDGET VALUES (31000, 9000, '+1000',10000, 100014, 'Training Event');INSERT INTO BUDGET VALUES (32001, 10130, '-2130',8000, 100016, 'Workshop Event');INSERT INTO BUDGET VALUES (33000, 5500, '+4500',10000, 100016, 'Seminar Event');INSERT INTO EVENTS VALUES (1000, 'Seminar', 'Paul Rest', 300, 20001, NULL, 'Event took place in the evening');INSERT INTO EVENTS VALUES (1001, 'Workshop', 'Bateel Rest', 600, 21000, 'Majority Positive Reviews', 'Event took place in the evening');INSERT INTO EVENTS VALUES (1002, 'Training', 'Paul Rest', 500, 22001, 'Mixed Reviews', 'Event took place in the morning');INSERT INTO EVENTS VALUES (1003, 'Training', 'Pizzaro Rest', 250, 23000, 'Negative Reviews', 'Event took place in the afternoon');INSERT INTO EVENTS VALUES (1004, 'Workshop', 'Bateel Rest', 700, 24001, 'Majority Positive Reviews', 'Event took place in the afternoon');INSERT INTO EVENTS VALUES (1005, 'Seminar', 'Paul Rest', 400, 25000, NULL, 'Event took place in the morning');INSERT INTO EVENTS VALUES (1006, 'Training', 'Paul Rest', 500, 30001, NULL, 'Event took place in the morning');INSERT INTO EVENTS VALUES (1007, 'Workshop', 'Duomo Rest', 600, 31000, 'Mixed Reviews', 'Event took place in the evening');INSERT INTO EVENTS VALUES (1008, 'Workshop', 'Le Rose Rest', 300, 32001, 'Negative Reviews', 'Event took place in the evening');INSERT INTO EVENTS VALUES (1009, 'Seminar', 'Paul Rest', 300, 33000, 'Majority Positive Reviews', 'Event took place in the afternoon');  INSERT INTO SPEAKER VALUES ('B.Gates@gmail.com', 1000, 'Bill', 'Gates', 0501220450);INSERT INTO SPEAKER VALUES ('S.Jobs@gmail.com', 1001, 'Steve', 'Jobs', 0561230410);INSERT INTO SPEAKER VALUES ('N.Ahmad@aus.edu', 1002, 'Norita', 'Ahmad', 065152484);INSERT INTO SPEAKER VALUES ('J.Baker@aus.edu', 1003, 'Jeff', 'Baker', 0502120790);INSERT INTO SPEAKER VALUES ('C.baker@aus.edu', 1004, 'Cynthia', 'Baker', 0546897346);INSERT INTO SPEAKER VALUES ('I.aguir@aus.edu', 1005, 'Innes','Aguir', 0567832489);INSERT INTO SPEAKER VALUES ('A.Abullah@aus.edu', 1006, 'Abed', 'Abdallah', 0501220451);INSERT INTO SPEAKER VALUES ('W.Disney@gmail.com', 1007, 'Walt', 'Disney', 0501521450);INSERT INTO SPEAKER VALUES ('R.Melo@aus.edu', 1008, 'Roberto', 'Melo', 0501264450);INSERT INTO SPEAKER VALUES ('N.Hasan@gmail.com', 1009, 'Nada', 'Hasan', 045689932); INSERT INTO VENUE VALUES (1220, 1001, 'Main Building', 300, 'Email', 100011);INSERT INTO VENUE VALUES (1221, 1002, 'Studio City', 600, 'Email', 100011);INSERT INTO VENUE VALUES (1222, 1003, 'Studio City', 350, 'Email', 100012);	INSERT INTO VENUE VALUES (1223, 1004, 'Student Center', 400, 'Email', 100012);INSERT INTO VENUE VALUES (1224, 1005, 'SBA 1009', 600, 'Email', 100012);INSERT INTO VENUE VALUES (1225, 1006, 'SBA 0007', 430, 'Phone', 100014);INSERT INTO VENUE VALUES (1226, 1007, 'Main Building', 500, 'Phone', 100015);INSERT INTO VENUE VALUES (1227, 1008, 'Studio City', 300, 'Phone', 100016);INSERT INTO VENUE VALUES (1228, 1009, 'AUR', 300, 'Phone', 100018);INSERT INTO VENUE VALUES (1229, 1010, 'NYU AD', 500, 'Phone', 100018); INSERT INTO CITL_EMP VALUES (100011, 'Yes, Jeffrey Baker', 'No', 'No', 'Survey Creation');INSERT INTO CITL_EMP VALUES (100012, 'No', 'No', 'Yes, Carlos Arotine', 'Catering Services');INSERT INTO CITL_EMP VALUES (100013, 'No', 'Yes, Linda Angell', 'No', 'Venue Determination');INSERT INTO CITL_EMP VALUES (100014, 'No', 'Yes, Abroon Qazi', 'No', 'Budget Allocation');INSERT INTO CITL_EMP VALUES (100015, 'Yes, Norita Ahmad', 'No', 'No', 'Event Determination');INSERT INTO CITL_EMP VALUES (100016, 'No', 'No', 'Yes, Jenny Joulakian', 'Survey Creation');INSERT INTO CITL_EMP VALUES (100017, 'No', 'No', 'Yes, Abdullah Hazem', 'Attendee Follow-up');INSERT INTO CITL_EMP VALUES (100018, 'No', 'Yes, Cynthia Baker', 'No', 'Venue Determination');INSERT INTO CITL_EMP VALUES (100019, 'Yes, Kichan Nam', 'No', 'No', 'Survey Creation');INSERT INTO CITL_EMP VALUES (100020, 'Yes, Aaron Gazley', 'No', 'No', 'Event Determination'); INSERT INTO SURVEY VALUES (100, 220, 1000, 15, 'All questions answered', 100011);INSERT INTO SURVEY VALUES (110, 230, 1005, 20, 'Majority answered', 10011);INSERT INTO SURVEY VALUES (120, 240, 1010, 15, 'All questions answered', 10016);INSERT INTO SURVEY VALUES (130, 250, 1015, 20, 'Majority unanswered', 10016);INSERT INTO SURVEY VALUES (140, 260, 1020, 35, 'All questions answered', 100011);INSERT INTO SURVEY VALUES (150, 270, 1025, 15, 'Majority unanswered questions', 100011);INSERT INTO SURVEY VALUES (160, 280, 1030, 20, 'All questions answered', 100019);INSERT INTO SURVEY VALUES (170, 290, 1045, 35, 'Majority questions answered', 100019);INSERT INTO SURVEY VALUES (180, 300, 1050, 15, 'All questions answered', 100011);INSERT INTO SURVEY VALUES (190, 310, 1055, 15, 'Majority questions answered', 100016); INSERT INTO ATTENDEES VALUES (100, 'Jack', 'Box', 'No', 'J.Box3@gmail.com', 0506897345);INSERT INTO ATTENDEES VALUES (101, 'Harry', 'Sam', 'No', 'H.Sam@gmail.com', 05046792977);INSERT INTO ATTENDEES VALUES (102, 'Sam', 'Elliot', 'Yes', 'Elliot_S@gmail.com', 0567890456);INSERT INTO ATTENDEES VALUES (103, 'Tam', 'Jackson', 'Yes', 'T.J@aus.edu', 0546891234);INSERT INTO ATTENDEES VALUES (104, 'Lamis', 'Hazem', NULL, 'Lamis.H@gmail.com', 0567894056);INSERT INTO ATTENDEES VALUES (105, 'Kenzy', 'Scott', 'No', 'Scott.Kenzy@gmail.com', 0579444732);INSERT INTO ATTENDEES VALUES (106, 'Bill', 'Scott', 'No', 'Bill.Scott@gmail.com', 0554972123);INSERT INTO ATTENDEES VALUES (107, 'Hanz', 'Haken', 'Yes', 'Hanz.H@aus.edu', 0507935622);INSERT INTO ATTENDEES VALUES (108, 'Walt', 'Disney', NULL, 'Walt.Disney@gmail.com', 0509838445);INSERT INTO ATTENDEES VALUES (109, 'Yaris', 'Toyoda', NULL, 'Yaris.t@gmail.com', 0506941201); INSERT INTO REGISTRATION VALUES (100, 'YES', NULL, NULL);INSERT INTO REGISTRATION VALUES (101, 'YES', NULL, NULL);INSERT INTO REGISTRATION VALUES (102, 'YES', NULL, NULL);INSERT INTO REGISTRATION VALUES (103, NULL, 'YES', NULL);INSERT INTO REGISTRATION VALUES (104, NULL, 'YES', NULL);INSERT INTO REGISTRATION VALUES (105, NULL, NULL, 'YES');INSERT INTO REGISTRATION VALUES (106, 'YES', NULL, NULL);INSERT INTO REGISTRATION VALUES (107, NULL, 'YES', NULL);INSERT INTO REGISTRATION VALUES (108, NULL, NULL, 'YES');INSERT INTO REGISTRATION VALUES (109, NULL, NULL, 'YES'); INSERT INTO SCHEDULE VALUES (1001, ’01-Jan-2022’, ‘8:00 PM’); INSERT INTO SCHEDULE VALUES (1002, ’10-Jan-2022’, ‘8:00 PM’);INSERT INTO SCHEDULE VALUES (1003, ’05-Feb-2022’, ‘9:00 AM’);INSERT INTO SCHEDULE VALUES (1004, ’10-Mar-2022’, ‘5:00 PM’);INSERT INTO SCHEDULE VALUES (1005, ’15-Apr-2022’, ‘5:00 PM’);INSERT INTO SCHEDULE VALUES (1006, ’20-May-2022’, ‘9:00 AM’);INSERT INTO SCHEDULE VALUES (1007, ’30-Jun-2022’, ‘9:00 AM’);INSERT INTO SCHEDULE VALUES (1008, ’08-Jul-2022’, ‘8:00 PM’);INSERT INTO SCHEDULE VALUES (1009, ’19-Aug-2022’, ‘8:00 PM’);INSERT INTO SCHEDULE VALUES (1010, NULL, ‘5:00 PM’); INSERT INTO DEPARTMENT VALUES (001, 100010, 'CAAS', 'Maths and Statistics');INSERT INTO DEPARTMENT VALUES (002, 100012, 'SBA', 'Dept. of Finance');INSERT INTO DEPARTMENT VALUES (003, 100013, 'SBA', 'Dept. of Marketing & ISA');INSERT INTO DEPARTMENT VALUES (004, 100014, 'SBA', 'Dept. of Accounting');INSERT INTO DEPARTMENT VALUES (005, 100015, 'SBA', 'Dept. of Management');INSERT INTO DEPARTMENT VALUES (006, 100016, 'CAAD', 'Dept. of Architecture');INSERT INTO DEPARTMENT VALUES (007, 100017, 'CAAD', 'Dept. of Art and Design');INSERT INTO DEPARTMENT VALUES (008, 100018, 'CEN', 'Computer Science and Engineering');INSERT INTO DEPARTMENT VALUES (009, 100019, 'CEN', 'Mechanical Engineering'); INSERT INTO DEPARTMENT VALUES (010, 100020, 'CEN', 'Industrial Engineering');/* For some reason, SQL kept asking me  “Determine and Insert value for ISA”, I kept it blank and as such, DEPT_CODE = 3 shows as only “Marketing” and not “Marketing & ISA” */    INSERT INTO FEEDBACK VALUES (001, NULL, NULL, ‘Unknown’, 1873);INSERT INTO FEEDBACK VALUES (002, ‘YES’, NULL, ‘Mostly positive’, 2453);INSERT INTO FEEDBACK VALUES (003, ‘YES, 60%’, ‘YES, 40%’, ‘Mixed reviews’, 3578);INSERT INTO FEEDBACK VALUES (004, NULL, ‘YES’, ‘Negative reviews’, 4892);INSERT INTO FEEDBACK VALUES (005, ‘YES’, NULL, ‘Mostly positive’, 5490);INSERT INTO FEEDBACK VALUES (006, NULL, NULL, ‘Unknown’, 6892);INSERT INTO FEEDBACK VALUES (007, NULL, NULL, ‘Unknown’, 7293);INSERT INTO FEEDBACK VALUES (008, ‘YES, 58%’, ‘YES, 42%’, ‘Mixed reviews’, 8374);INSERT INTO FEEDBACK VALUES (009, NULL, ‘YES’, ‘Mostly Negative’, 9837);INSERT INTO FEEDBACK VALUES (010, ‘YES’, ‘NULL’, ‘Mostly Positive’, 10394); INSERT INTO EMPLOYEE VALUES (1001, 001, 'Hana', 'Sulieman', 'h.sulieman@aus.edu', 'Statistics Professor');INSERT INTO EMPLOYEE VALUES (1002, 002, 'Innes', 'Aguir', 'i.aguir@aus.edu', 'Finance Professor');INSERT INTO EMPLOYEE VALUES (1003, 003, 'Norita', 'Ahamd', 'n.ahmad@aus.edu', 'Business Analytics Professor');INSERT INTO EMPLOYEE VALUES (1004, 004, 'Abed', 'Abdallah', 'a.abdullah@aus.edu', 'Accounting Professor');INSERT INTO EMPLOYEE VALUES (1005, 005, 'Cynthia', 'Baker', 'c.baker@aus.edu', 'Management Professor');INSERT INTO EMPLOYEE VALUES (1006, 006, 'Roberto', 'Melo', 'r.melo@aus.edu', 'Architecture Professor');INSERT INTO EMPLOYEE VALUES (1007, 007, 'Zinka', 'Bejtic', 'z.bejtic@aus.edu', 'Art and Design Professor');INSERT INTO EMPLOYEE VALUES (1008, 008, 'Rana', 'Ahmed', 'r.ahmed@aus.edu', 'Comp Sci Professor');INSERT INTO EMPLOYEE VALUES (1009, 009, 'Wael', 'Abuzaid', 'w.abuzaid@aus.edu', 'Mechanical Professor');INSERT INTO EMPLOYEE VALUES (1010, 010, 'Vian', 'Ahmed', 'v.ahmed@aus.edu', 'Industrial Professor'); INSERT INTO SPECIAL_EVENT VALUES (101, 001, 'Collab test creation', 'Auditorium Requested');INSERT INTO SPECIAL_EVENT VALUES (102, 002, 'Collab Seminar', NULL);INSERT INTO SPECIAL_EVENT VALUES (103, 003, 'Collab workshop', NULL);INSERT INTO SPECIAL_EVENT VALUES (104, 004, NULL, NULL);INSERT INTO SPECIAL_EVENT VALUES (105, 005, NULL, NULL);INSERT INTO SPECIAL_EVENT VALUES (106, 006, 'Collab Ceremony', 'Smoke machine requested');INSERT INTO SPECIAL_EVENT VALUES (107, 007, 'Collab Workshop', 'VR headsets requested');INSERT INTO SPECIAL_EVENT VALUES (108, 008, 'Collab Seminar', NULL);INSERT INTO SPECIAL_EVENT VALUES (109, 009, NULL, NULL);INSERT INTO SPECIAL_EVENT VALUES (110, 010, 'Collab Ceremony', 'Additional Speakers');  INSERT INTO INT_SPEAKER VALUES ('N.ahmad@aus.edu', 1002, 'Norita', 'Ahmad', 003); INSERT INTO INT_SPEAKER VALUES ('J.Baker@aus.edu', 1003, 'Jeff', 'Baker', 003);INSERT INTO INT_SPEAKER VALUES ('C.baker@aus.edu', 1004, 'Cynthia', 'Baker', 005);INSERT INTO INT_SPEAKER VALUES ('I.aguir@aus.edu', 1005, 'Innes','Aguir', 002);INSERT INTO INT_SPEAKER VALUES ('A.Abullah@aus.edu',1006, 'Abed', 'Abdallah', 004);INSERT INTO INT_SPEAKER VALUES ('R.Melo@aus.edu', 1008, 'Roberto', 'Melo', 006);INSERT INTO INT_SPEAKER VALUES ('H.sulieman@aus.edu', NULL, 'Hana', 'Sulieman', 001);INSERT INTO INT_SPEAKER VALUES ('Z.bejtic@aus.edu', NULL, 'Zinka', 'Bejtic', 007);INSERT INTO INT_SPEAKER VALUES ('R.ahmad@aus.edu', NULL, 'Rana', 'Ahmad', 008);INSERT INTO INT_SPEAKER VALUES ('w.abuzaid@aus.edu', NULL, 'Wael', 'Abuzaid', 009);/* EMP_ID can be null because not all of these employees have yet spoken in an event, however they intend to. */ INSERT INTO EXT_SPEAKER VALUES (‘B.Gates@gmail.com’, 1000, ‘Bill’, ‘Gates’, ‘Microsoft’);INSERT INTO EXT_SPEAKER VALUES (‘S.Jobs@gmail.com’, 1001, ‘Steve’, ‘Jobs’, ‘Apple’);INSERT INTO EXT_SPEAKER VALUES (‘W.Disney@gmail.com’, 1007, ‘Walt’, ‘Disney’, ‘Disney);INSERT INTO EXT_SPEAKER VALUES (‘N.Hasan@gmail.com’, 1009, ‘Nada’, ‘Hasan’, ‘UOS’);INSERT INTO EXT_SPEAKER VALUES (‘H.Arotine@gmail.com’, NULL, ‘Hakob’, ‘Arotine’, ‘SAP’);INSERT INTO EXT_SPEAKER VALUES (‘E.Elliot@gmail.com’, NULL, ‘Ernest, ‘Elliot’, ‘Google’);INSERT INTO EXT_SPEAKER VALUES (‘H.emmert@gmail.com’, NULL, ‘Helen’, ‘Emmert’, ‘Microsoft’);INSERT INTO EXT_SPEAKER VALUES (‘E.hoekstra’, NULL, ‘Eric’, ‘Hoekestra’, ‘Oracle’);INSERT INTO EXT_SPEAKER VALUES (‘L.maury@gmail.com’, NULL, ‘Leslie’, ‘Maury’, ‘Google’);INSERT INTO EXT_SPEAKER VALUES (‘M.thomas@gmail.com’, NULL, ‘Miguel’, ‘Thomas’, ‘Apple’);Triggers: CREATE OR REPLACE TRIGGER TRG_EVENT_DATEAFTER INSERT OR UPDATE OF EVENT_DATE ON EVENTSBEGINUPDATE EVENTSSET EVENT_DATE = CURRENT_DATEWHERE EVENT_DATE IS NULL;END; /* This trigger is used to replace NULL date values every time a new event is created (automatically uses the current date to replace null values) */ CREATE OR REPLACE TRIGGER TRIG_BUDGET_ASSIGNAFTER INSERT OR UPDATE OF EXPENSES ON BUDGETBEGINUPDATE BUDGETSET BUDGET_AMT = 15000WHERE EXPENSES = 15000;END; /* This trigger is used to update budget amounts to have equal values as expenses - in this case, setting budget amounts to 15000 when expenses are 15000 to make sure we have enough money for the event */ Updateable View: CREATE VIEW EVENTUPD AS (SELECT BUDGET.Budget_AMT, BUDGET.Expenses, EVENTS.Event_ID, EVENTS.Event_Type, EVENTS.Seating_NumberFROM BUDGET JOIN EVENTS ON BUDGET.Cost_Center_Account_Number = EVENTS.Cost_Center_Account_Number); /* This view shows the budget as well as the expenses for existing events or future events. Additionally, expected seating number will also be provided for analytical purposes to determine whether the majority of costs can be deduced in correlation to seating number */  Procedures: CREATE OR REPLACE PROCEDURE PRC_BUDGET_UPDAS BEGINUPDATE BUDGETSET BUDGET_AMT = BUDGET_AMT + 1000WHERE DIFFERENCE = '-1000';END;/  /* This procedure is used to once again update budget amounts to break-even points. In this case, if the budget is 1000 DHS short, the procedure would update it to match the expense amount */ CREATE OR REPLACE PROCEDURE PRO_SEAT_LIMITAS BEGIN UPDATE EVENTS SET SEATING_NUMBER = 700WHERE SEATING_NUMBER >= 701;END;/* This procedure is used to limit the number of seats available in venues. In our case, we limited the number of seats available in a venue to 700 */10 Unique Queries based on real or perceived business needs	•	To check how many of the registered people attendedSELECT ATTENDEE_ID, Will_AttendFROM REGISTRATIONWHERE WILL_NOT_ATTEND IS NULL AND WILL_ATTEND IS NOT NULLORDER BY ATTENDEE_ID;	•	To show maximum budget amount for (MAX function)SELECT MAX(Budget_AMT) AS “Maximum Budget”FROM BUDGET;	•	To check which events have expenses greater than 10,000 (JOIN ON function)SELECT E.EVENT_ID AS "EVENT ID", B.EXPENSES AS "EXPENSES", B.DESCRIPTION AS "DESCRIPTION"FROM BUDGET B JOIN EVENTS E ON B.Cost_center_Account_Number = E.Cost_center_Account_NumberWHERE B.EXPENSES >= 10000; 	•	To check which speakers were featured in seminar events.SELECT S.EMAIL_ADDRESS, E.EVENT_IDFROM SPEAKER S JOIN EVENTS E ON S.EVENT_ID=E.EVENT_IDWHERE EVENT_TYPE LIKE 'Seminar';	•	To check which speaker spoke in most events (count function) SELECT Event_ID, COUNT(Email_Address)FROM SPEAKER GROUP BY Event_ID;	•	To check how many internal speakers still have not spoken in an eventSELECT EMAIL_ADDRESS, SPEAKER_FNAME AS "FIRST NAME", SPEAKER_LNAME AS "LAST NAME"FROM INT_SPEAKERWHERE EMP_ID IS NULL;	•	To check the count of Paul restaurant being used as a catering service for each event (COUNT, CASE WHEN,  and ORDER BY functions)SELECT COUNT(CATERING_SERVICES), (CASE WHEN CATERING_SERVICES = 'Paul Rest' then 1 else 0 END) AS "PAUL RESTAURANT"FROM EVENTS WHERE CATERING_SERVICES = 'Paul Rest' GROUP BY CATERING_SERVICES;	•	To display which event has a greater budget amount compared to the average budget amounts for each event (SUBQUERY function).SELECT COST_CENTER_ACCOUNT_NUMBER, BUDGET_AMT, EXPENSES FROM BUDGETWHERE BUDGET_AMT > (SELECT AVG(BUDGET_AMT) FROM BUDGET);	•	To check average budget for events (AVG function)SELECT E.Event_ID, AVG(B.Budget_AMT)FROM EVENTS E JOIN BUDGET B ON E.Cost_Center_Account_Number = B.Cost_Center_Account_NumberGROUP BY E.Event_ID;	•	To check the overall feedback of the event where the seating number for each event is greater than or equal to 500 (HAVING function)SELECT EVENT_ID, SUM(SEATING_NUMBER), EVENT_RECORDINGSFROM EVENTS HAVING SUM(SEATING_NUMBER) >= 500 GROUP BY EVENT_ID, EVENT_RECORDINGS;